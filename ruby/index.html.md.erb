---
title: Ruby Buildpack
owner: Buildpacks
---

<strong><%= modified_date %></strong>

## <a id='pushing_apps'></a> Push Apps ##

This buildpack will be used if your app has a `Gemfile` and `Gemfile.lock` in the root directory. It will then use Bundler to install your dependencies.

If your Cloud Foundry deployment does not have the Ruby Buildpack installed, or the installed version is out of date, you can use the latest version with the command:

```bash
cf push my_app -b https://github.com/cloudfoundry/ruby-buildpack.git
```

For more detailed information about deploying Ruby applications see the following topics:

* <a href="./ruby-tips.html" class="subnav">Tips for Ruby Developers</a>
* <a href="./deploying-apps-index.html" class="subnav">Getting Started Deploying Apps</a>
* <a href="./rake-config.html" class="subnav">Configuring Rake Tasks for Deployed Apps</a>
* <a href="./ruby-environment.html" class="subnav">Environment Variables Defined by the Ruby Buildpack</a>
* <a href="./ruby-service-bindings.html" class="subnav">Configuring Service Connections for Ruby</a>
* <a href="./windows.html" class="subnav">Support for Windows Gemfiles</a>

You can find the source for the buildpack on GitHub:
[https://github.com/cloudfoundry/cf-buildpack-ruby](https://github.com/cloudfoundry/cf-buildpack-ruby)

## <a id='supported_versions'></a>Supported Versions ##

Supported Ruby versions can be found [in the release notes](https://github.com/cloudfoundry/ruby-buildpack/releases).

## <a id='runtime'></a>Specify a Ruby Version ##

Specific versions of the Ruby runtime can be specified in the `Gemfile`:

### <a id='mri_runtime'></a>MRI ###

For MRI you can specify the version of Ruby by doing the following:

``` ruby
ruby '~> 2.2.3'
```

With this example declaration in the `Gemfile`, if Ruby versions `2.2.4`, `2.2.5`, and `2.3.0` are present in the Ruby buildpack, the app will use Ruby `2.2.5`.

For more information about the `ruby` directive for Bundler Gemfiles, see [Bundler's documentation](http://bundler.io/gemfile_ruby.html).

<p class="note"><strong>Note</strong>: If you use v1.6.18 or earlier, you must specify an exact version, such as <code>ruby '2.2.3'</code>.
In <a href="https://github.com/cloudfoundry/ruby-buildpack/releases/tag/v1.6.18">Ruby Buildpack v1.6.18</a>
and earlier, Rubygems do not support version operators for the <code>ruby</code> directive. </p>
### <a id='jruby_runtime'></a>JRuby ###
For JRuby you can specify the version of ruby by doing the following:

JRuby version `1.7.x` supports either `1.9` mode, e.g.:

``` ruby
ruby '1.9.3', :engine => 'jruby', :engine_version => '1.7.25'
```

or `2.0` mode, e.g.:

``` ruby
ruby '2.0.0', :engine => 'jruby', :engine_version => '1.7.25'
```

For Jruby version `>= 9.0`:

``` ruby
ruby '2.2.3', :engine => 'jruby', :engine_version => '9.0.5.0'
```

The buildpack only supports the stable Ruby versions, which are listed in the `manifest.yml` and [releases page](https://github.com/cloudfoundry/ruby-buildpack/releases).

If you try to use a binary that is not currently supported, staging your app will fail and you will see the following error message:

```
       Could not get translated url, exited with: DEPENDENCY_MISSING_IN_MANIFEST: ...
 !
 !     exit
 !
Staging failed: Buildpack compilation step failed
```

Additionally, note that the pessimistic version operator (`~>`) on the Gemfile `ruby` directive for JRuby is not supported by the Ruby buildpack.

## <a id='vendoring'></a>Vendor App Dependencies ##

As stated in the [Disconnected Environments documentation](https://github.com/cf-buildpacks/buildpack-packager/blob/master/doc/disconnected_environments.md), your application must 'vendor' its dependencies.

For the Ruby buildpack, use bundler:

```shell
cd <your app dir>
bundle package --all
```

```cf push``` uploads your vendored dependencies. The buildpack will compile any dependencies requiring compilation while staging your application.


## <a id='logging'></a>Buildpack Logging and Application Logging ##
The buildpack only runs during the staging process, and only logs what is important to staging, such as what is being downloaded, what the configuration is, and work that the buildpack does on your application.

The buildpack stops logging when the staging process finishes. The Loggregator handles application logging.

Your application must write to STDOUT or STDERR for its logs to be included in
the Loggregator stream. For more information, see the [Application Logging in Cloud Foundry](../../devguide/deploy-apps/streaming-logs.html) topic.

If you are deploying a Rails application, the buildpack may or may not automatically install the necessary plugin or gem for logging, depending on the Rails version of the application:

* Rails 2.x: The buildpack automatically installs the `rails_log_stdout` plugin into the application. For more information about the `rails_log_stdout` plugin, refer to the [Github README](https://github.com/ddollar/rails_log_stdout).

* Rails 3.x: The buildpack automatically installs the `rails_12factor` gem if it is not present and issues a warning message. You must add the `rails_12factor` gem to your `Gemfile` to quiet the warning message. For more information about the `rails_12factor` gem, refer to the [Github README](https://github.com/heroku/rails_12factor).

* Rails 4.x: The buildpack only issues a warning message that the `rails_12factor` gem is not present, but does not install the gem. You must add the `rails_12factor` gem to your `Gemfile` to quiet the warning message. For more information about the `rails_12factor` gem, refer to the [Github README](https://github.com/heroku/rails_12factor).

For more information about the `rails_12factor` gem, refer to the [Github README](https://github.com/heroku/rails_12factor).

## <a id='proxy_support'></a> Proxy Support ##

If you need to use a proxy to download dependencies during staging, you can set
the `http_proxy` and/or `https_proxy` environment variables. For more information, see
the [Proxy Usage Docs](http://docs.cloudfoundry.org/buildpacks/proxy-usage.html).

## <a id='bosh_trusted_cert'></a>BOSH Configured Custom Trusted Certificate Support ##

Ruby uses certificates stored in `/etc/ssl/certs`. Your platform operator can configure the platform to [add the custom certificates into the application container](https://docs.cloudfoundry.org/adminguide/trusted-system-certificates.html).

## <a id='help_support'></a>Help and Support ##

Join the #buildpacks channel in our [Slack community] (http://slack.cloudfoundry.org/) if you need any further assistance.

For more information about using and extending the Ruby buildpack in Cloud Foundry, see
the [ruby-buildpack GitHub repository](https://github.com/cloudfoundry/ruby-buildpack).

You can find current information about this buildpack on the Ruby buildpack
[release page](https://github.com/cloudfoundry/ruby-buildpack/releases) in GitHub.
